name: ðŸ†• NEW METAPACKAGE
description: Propose the addition of a new metapackage that installs another package via dependencies
title: "Metapackage proposal: <package_name>.vm"
labels: [":new: package"]
body:
  - type: markdown
    attributes:
      value: |
        Thanks for contributing to [VM-Packages](https://github.com/mandiant/VM-Packages), your package proposal supports tools available for [FLARE-VM](https://github.com/mandiant/flare-vm), [Commando-VM](https://github.com/mandiant/commando-vm) and (ThreatPursuit-VM)[https://github.com/mandiant/ThreatPursuit-VM]! :cupid: Please ensure that your suggested tool doesn't already exist within the set of [current packages](https://github.com/mandiant/VM-Packages/tree/main/packages) and that there is no [issue](https://github.com/mandiant/VM-Packages/issues?q=is%3Aopen+is%3Aissue+label%3A%22%3Anew%3A+package%22) proposal already.
  - type: input
    id: pkg_name
    attributes:
      label: Package Name
      description: |
        The convention is to use lowercase names with the following format: `toolname` or `tool-name`. For example `capa` and `fakenet-ng`. **Please add this name to the issue title as well.**
      placeholder: ex. fakenet-ng
    validations:
      required: true
  - type: input
    id: tool_name
    attributes:
      label: Tool Name
      description: The name of the tool being installed (usually the file name with the `.exe`), normally different from the package name. For example fakenet-ng (package name) vs FakeNet-NG (tool name).
      placeholder: ex. FakeNet-NG
    validations:
      required: true
  - type: dropdown
    id: type
    validations:
      required: true
    attributes:
      label: Package type
      description: |
        This is needed to know how to send the automatic PR.
        METAPACKAGE - Install and configure existing packages via dependencies
      options:
        - METAPACKAGE
  - type: input
    id: version
    attributes:
      label: Tool's version number
      placeholder: ex. 1.4.11
    validations:
      required: true
  - type: dropdown
    id: category
    validations:
      required: true
    attributes:
      label: Category
      description: Which category should this tool be installed to?
      options:
        - Command & Control
        - Credential Access
        - Debuggers
        - Delphi
        - Disassemblers
        - dotNet
        - Documents
        - Exploitation
        - File Information
        - Forensic
        - Hex Editors
        - InnoSetup
        - Java & Android
        - Javascript
        - Lateral Movement
        - Memory
        - Networking
        - Packers
        - Payload Development
        - PE
        - Persistence
        - Privilege Escalation
        - Productivity Tools
        - Reconnaissance
        - Registry
        - Shellcode
        - Utilities
        - Visual Basic
        - Web Application
        - Wordlists
  - type: input
    id: authors
    attributes:
      label: Tool's authors
      description: Comma separated list of authors for tool
      placeholder: ex. Elmo, Bert, Grover, Cookie Monster
    validations:
      required: true
  - type: input
    id: description
    validations:
      required: true
    attributes:
      label: Tool's description
      description: The description should be short and not include version specific details or other information that is likely to change in a future version.
      placeholder: ex. FakeNet-NG is a next generation dynamic network analysis tool for malware analysts and penetration testers.
  - type: input
    id: dependency
    validations:
      required: true
    attributes:
      label: Dependency
      description: Preexisting Chocolatey package name to install via Chocolatey's dependency functionality. Find preexisting packages at https://community.chocolatey.org/packages (e.g., the name `ghidra` from https://community.chocolatey.org/packages/ghidra).
  - type: input
    id: shim_path
    validations:
      required: true
    attributes:
      label: Shim path
      description: Installed Chocolatey packages automatically create "shims" (i.e., executable proxies) to the installed applications. The default Chocolatey shim location is `%PROGRAMDATA%\chocolatey\bin`. Provide the path for the Chocolatey "shimmed" executable relative to the `$Env:ChocolateyInstall` path (i.e., `%PROGRAMDATA%\chocolatey`). For example, provide a path like `bin\ollydbg.exe`.
  - type: textarea
    id: why
    attributes:
      label: Why is this tool a good addition?
      description: Tell us why you would like to have this package in FLARE-VM and how this tool is useful for malware analysis, incident response, penetration testing and other security related tasking. Adding new packages involves more maintenance work, tell us what is unique about this tool that can not be done with the current toolset.
    validations:
      required: true
  - type: markdown
    attributes:
      value: |
        ---
        We really appreciate that you share your package idea with us and we will review your issue as soon as possible. Please understand that our time is limited and we may not be able to create a package for this tool as fast as you may like. To speed up the process, please fill the issue accurately as this may allow our bot to send an automatic PR. Note that this may not work for all cases. You can check our [Contributing Wiki page](https://github.com/mandiant/VM-Packages/wiki/Contributing) and send a pull request with the new package. We encourage the community to help us create new packages and to maintain existing ones. Join us! :hugs:
