name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run lint.ps1
        run: scripts/test/lint.ps1

  check_nuspec:
    runs-on: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get changed files
        id: files
        uses: Ana06/get-changed-files@v2.1.0
        with:
          filter: 'packages/*/**'
      - name: Check nuspec is modified for every modified package
        # It runs only if there are modified files
        if: steps.files.outputs.added_modified != ''
        run: |
          $changed_files = "${{ steps.files.outputs.added_modified }}".Split(" ")
          $nuspecs = [string]@($changed_files | where { $_ -Like "*.nuspec" })
          $others = @($changed_files | where { $_ -NotLike "*.nuspec" })
          foreach ($file in $others) {
              if ($file -match "packages/[^/]*") {
                  $package = $matches.0
                  if (!$nuspecs.contains($package)) {
                      Write-Error "The version in $package needs to be modified"
                  }
              }
          }

  test_upload:
    runs-on: ${{ matrix.os }}
    needs: [lint, check_nuspec]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, windows-2022]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get changed files
        id: files
        uses: Ana06/get-changed-files@v2.0.0
        with:
          filter: '*.nuspec'
      - name: Build and test all modified packages
        id: test
        # It runs only if there are modified files
        if: steps.files.outputs.added_modified != ''
        run: |
          $packages = "${{ steps.files.outputs.added_modified }}".Split(" ") | Foreach-Object { (Get-Item $_).Directory.Name }
          scripts/test/test_install.ps1 "common.vm $packages"
      - name: Push all built packages to MyGet
        # Only push packages on master if they were built (not if testing was skipped) and
        # only with one version of Windows (otherwise it would be pushed 3 times)
        if: steps.test.outcome == 'success' && github.event_name == 'push' && matrix.os == 'windows-2019'
        run: |
          $built_pkgs = Get-ChildItem built_pkgs
          Set-Location built_pkgs

          foreach ($package in $built_pkgs) {
              cpush -s "https://www.myget.org/F/vm-packages/api/v2" -k ${{ secrets.MYGET_TOKEN }} $package
          }
      - name: Upload chocolatey logs to artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: logs-${{ matrix.os }}.zip
          path: |
            C:\ProgramData\chocolatey\logs\chocolatey.log
            C:\ProgramData\chocolatey\lib-bad\**\tools\install_log.txt
            C:\ProgramData\_VM\log.txt
